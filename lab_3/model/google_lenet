import torch
import torch.nn as nn

class InceptionModule(nn.Module):
    def __init__(self, in_channels, out1x1, reduce3x3, out3x3, reduce5x5, out5x5, out1x1pool):
        super(InceptionModule, self).__init__()
        # 1x1 convolution
        self.branch1 = nn.Conv2d(in_channels, out1x1, kernel_size=1)
        
        # 1x1 convolution followed by 3x3 convolution
        self.branch2 = nn.Sequential(
            nn.Conv2d(in_channels, reduce3x3, kernel_size=1),
            nn.ReLU(inplace=True),
            nn.Conv2d(reduce3x3, out3x3, kernel_size=3, padding=1)
        )
        
        # 1x1 convolution followed by 5x5 convolution
        self.branch3 = nn.Sequential(
            nn.Conv2d(in_channels, reduce5x5, kernel_size=1),
            nn.ReLU(inplace=True),
            nn.Conv2d(reduce5x5, out5x5, kernel_size=5, padding=2)
        )
        
        # 3x3 max pooling followed by 1x1 convolution
        self.branch4 = nn.Sequential(
            nn.MaxPool2d(kernel_size=3, stride=1, padding=1),
            nn.Conv2d(in_channels, out1x1pool, kernel_size=1)
        )

    def forward(self, x):
        return torch.cat([self.branch1(x), self.branch2(x), self.branch3(x), self.branch4(x)], 1)

class GoogLeNet(nn.Module):
    def __init__(self, config):
        super(GoogLeNet, self).__init__()
        self.conv1 = nn.Conv2d(in_channels=config['image_C'], out_channels=64, kernel_size=7, stride=2, padding=3)
        self.relu = nn.ReLU(inplace=True)
        self.maxpool1 = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)
        self.conv2 = nn.Conv2d(64, 64, kernel_size=1)
        self.conv3 = nn.Conv2d(64, 192, kernel_size=3, padding=1)
        self.maxpool2 = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)
        self.inception3a = InceptionModule(192, 64, 96, 128, 16, 32, 32)
        self.maxpool3 = nn.MaxPool2d(kernel_size=3, stride=1, padding=1)
        self.maxpool4 = nn.MaxPool2d(kernel_size=3, stride=1, padding=1)
        self.fc = nn.Linear(1024, config['num_classes'])
        self.avgpool = nn.AvgPool2d(kernel_size=(1, 1))
    def forward(self, x):
        x = x.unsqueez(1)
        x = self.maxpool1(self.relu(self.conv1(x)))
        x = self.maxpool2(self.relu(self.conv3(self.relu(self.conv2(x)))))
        x = self.inception3a(x)
        x = self.inception3a(x)
        x = self.maxpool3(self.relu(x))
        x = self.inception3a(x)
        x = self.inception3a(x)
        x = self.inception3a(x)
        x = self.inception3a(x)
        x = self.inception3a(x)
        x = self.maxpool3(self.relu(x))  
        x = self.inception3a(x)
        x = self.inception3a(x)
        x = self.avgpool(self.relu(x))
        x = x.view(x.size(0), -1)
        x = self.fc(x)
        x = torch.softmax(x, dim=-1)
        return x

class GoogLeNet_Model(nn.Module):
    def __init__(self, config):
        super().__init__()
        self.googlenet = GoogLeNet(config)
        self.loss_fn = nn.CrossEntropyLoss()

    def forward(self, imgs, labels=None):
        if labels is not None:
            logits = self.googlenet(imgs)
            loss = self.loss_fn(logits, labels)
            return logits, loss
        else:
            logits = self.googlenet(imgs)
            return logits
